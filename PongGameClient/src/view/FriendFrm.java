/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import control.ClientCtr;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.FriendRequest;
import model.Player;
import model.ObjectWrapper;

/**
 *
 * @author nguye
 */
public class FriendFrm extends javax.swing.JFrame {
private ClientCtr myControl;
ClientMainFrm cmf;
ArrayList<Player> friendList = new ArrayList<>();
ArrayList<Player> playerList = new ArrayList<>();
ArrayList<Player> friendRequestList = new ArrayList<>();
Player mainPlayer;
int playerId;
    /**
     * Creates new form FriendFrm
     */
    public FriendFrm(ClientMainFrm cmf,ClientCtr socket,ArrayList<Player> friendList,ArrayList<Player> playerList,Player mainPlayer) {
        initComponents();
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        
        this.myControl=socket;
        this.cmf=cmf;
        this.mainPlayer=mainPlayer;
        this.playerId=mainPlayer.getId(); 
        this.friendList=friendList;
        this.playerList = playerList;
        System.out.println("friendlist size: "+friendList.size());
        
        fillTable1(friendList);
        getFriendRequest(mainPlayer.getId());
        myControl.getActiveFunction().add(new ObjectWrapper(ObjectWrapper.REPLY_FRIEND_REQUEST_LIST, this));     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Friend List");

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Friend request");

        jButton1.setText("Refesh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(101, 101, 101)
                                .addComponent(jButton1)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void initTable1(int size){
        String[] columnNames = {"", "NickName", "Status"};
       DefaultTableModel tableModel = new DefaultTableModel(columnNames, size) {
             @Override
          public boolean isCellEditable(int row, int column) {
            //all cells false
                return false;
            }
    };
            jTable1.setModel(tableModel); 
        
    }
    public void fillTable1(ArrayList<Player> friendList) { 
            initTable1(friendList.size());        
            for(int i=0; i<friendList.size(); i++){
                jTable1.setValueAt(i+1+"", i, 0);
                jTable1.setValueAt(friendList.get(i).getNickName(), i, 1); 
                jTable1.setValueAt(friendList.get(i).getStatus(), i, 2);
            }
    }
    public void initTable3(int size){
        String[] columnNames = { "NickName", " "};
       DefaultTableModel tableModel = new DefaultTableModel(columnNames, size) {
             @Override
          public boolean isCellEditable(int row, int column) {
            //all cells false
                return false;
            }
    };
            jTable3.setModel(tableModel); 
        
    }
    public void fillTable3(ArrayList<Player> friendRequest) { 
            initTable3(friendRequest.size());        
            for(int i=0; i<friendRequest.size(); i++){
                jTable3.setValueAt(friendRequest.get(i).getNickName(), i, 0); 
                jTable3.setValueAt("Friend request!", i, 1);
            }
    }
    public void getFriendRequest(int id){
        myControl.sendData(new ObjectWrapper(ObjectWrapper.FRIEND_REQUEST_LIST, id));
    }
    public void refresh(){
        getFriendRequest(mainPlayer.getId());
        cmf.updateFriendList();
        cmf.updatePlayerList();
        playerList=cmf.getPlayerList();
        friendList=cmf.getFriendList();
        fillTable1(friendList);
    }
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int column = jTable1.getColumnModel().getColumnIndexAtX(evt.getX()); // get the coloum of the button
        int row = evt.getY() / jTable1.getRowHeight(); // get the row of the button
                // *Checking the row or column is valid or not
                if (row<friendList.size() &&row < jTable1.getRowCount() && row >= 0 && column < jTable1.getColumnCount() && column >= 0) {
                     for(int i=0;i<myControl.getActiveFunction().size();i++){
                    if(myControl.getActiveFunction().get(i).getData() instanceof InfoPlayerFrm) {
                        myControl.getActiveFunction().remove(i);
                    }
            }
                    (new InfoPlayerFrm(myControl, (Player)friendList.get(row),mainPlayer,friendList,true,this)).setVisible(true);
                }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        refresh();  
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseClicked
        // TODO add your handling code here:
         int column = jTable3.getColumnModel().getColumnIndexAtX(evt.getX()); // get the coloum of the button
                int row = evt.getY() / jTable3.getRowHeight(); // get the row of the button
                // *Checking the row or column is valid or not
                if (row<friendRequestList.size() &&row < jTable3.getRowCount() && row >= 0 && column < jTable3.getColumnCount() && column >= 0) {
                     String message = "Friend request from "+friendRequestList.get(row).getNickName();
                    int option = JOptionPane.showConfirmDialog(this,message, null, JOptionPane.YES_NO_CANCEL_OPTION);
                    if(option==JOptionPane.YES_OPTION){
                        ArrayList<Integer> response = new ArrayList<>();
                        response.add(friendRequestList.get(row).getId());
                        response.add(mainPlayer.getId());
                        response.add(1);
                        myControl.sendData(new ObjectWrapper(ObjectWrapper.RESPONSE_FRIEND_REQUEST, response));   
                        JOptionPane.showMessageDialog(this, "You and "+friendRequestList.get(row).getNickName()+" are friend now.");
                        friendList.add(friendRequestList.get(row));
                        fillTable1(friendList);
                        cmf.updateFriendList();
                        friendList=cmf.getFriendList();
                        friendRequestList.remove(row);
                        fillTable3(friendRequestList);                    
                    }
                    else if(option==JOptionPane.NO_OPTION){
                        ArrayList<Integer> response = new ArrayList<>();
                        response.add(friendRequestList.get(row).getId());
                        response.add(mainPlayer.getId());
                        response.add(0);
                        myControl.sendData(new ObjectWrapper(ObjectWrapper.RESPONSE_FRIEND_REQUEST, response));   
                        friendRequestList.remove(row);
                        fillTable3(friendRequestList);
                    }
                }
    }//GEN-LAST:event_jTable3MouseClicked
    public void receivedDataFF(ObjectWrapper data){
        if(data.getData() instanceof FriendRequest){
            FriendRequest friendRQ = (FriendRequest) data.getData();
            if(friendRQ.getPlayerSend().size()>0){
                friendRequestList=friendRQ.getPlayerSend();
                for(int i=0;i<friendRequestList.size();i++){
                    for(int j=0;j<playerList.size();j++){
                        if(friendRequestList.get(i).getId()==playerList.get(j).getId()){
                            friendRequestList.get(i).setStatus(playerList.get(j).getStatus());
                            break;
                        }
                    }
                }
                fillTable3(friendRequestList);
            }
        }
        else 
            JOptionPane.showMessageDialog(this, "Failed to get friend request list!");
    }
    
    public void updateUnFriend(Player player){
        for(int i=0;i<friendList.size();i++){
            if(player.getId()==friendList.get(i).getId()){
                friendList.remove(i);
                break;
            }
        }
        fillTable1(friendList);
    }
    /**
     * @param args the command line arguments
     */
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    // End of variables declaration//GEN-END:variables
}
